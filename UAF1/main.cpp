/*
 * UAF1
 *
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <libgen.h>
#include <unistd.h>
#include <iostream>

#define MIN(x, y) (((x) < (y)) ? (x) : (y))

struct config {
		unsigned char app_key[8];
		char filename[64];
		char alt_path[152];
		char command[32];
};

struct backup{
	unsigned char code[128];
	unsigned char comments[96];
	unsigned char metadata[32];
};

void get_pwd(config *conf){

	system(conf->command);
}

void reset_config(config *conf){

	memset(conf->app_key, 0, 8);
	memset(conf->filename, 0, 64);
	memset(conf->alt_path, 0, 152);
	memset(conf->command, 0, 32);

	free(conf);
}

void set_default_config(config *conf){

	memcpy(conf->app_key, "\xe1\x22\xaa\x32\x87\xee\xbb\x01", 8);
	strncpy(conf->filename, "temp", 64);
	strncpy(conf->alt_path, "/tmp", 152);
	strncpy(conf->command, "pwd", 32);
}

config *config_initialization(){

	config *tmp = (config*)malloc(sizeof(config));

	set_default_config(tmp);

	std::cout << "Configuration successfully loaded" << std::endl;

	return tmp;
}

backup *create_backup(unsigned char buf[256]){

	backup *tmp = (backup*)malloc(sizeof(backup));

	memcpy(tmp->code, &buf[0], 128);

	memcpy(tmp->comments, &buf[128], 96);

	memcpy(tmp->metadata, &buf[224], 32);

	return tmp;
}

int main(int argc, char *argv[]){

	int fd = open(argv[1], O_RDONLY);
	if(fd < 0){
			printf("Error opening the input file \n\n");
			exit(-1);
	}

	struct stat st;
	stat(argv[1], &st);
	if(st.st_size < 256){
			printf("Wrong file size \n\n");
			exit(-1);
	}

	unsigned char buf[256];
	read(fd, buf, 256);

	config *conf = config_initialization();

	std::cout << "Current path: " << std:: endl;
	get_pwd(conf);
	std::cout << std::endl;


	reset_config(conf);

	backup *b = create_backup(buf);

	std::cout << "Backup was created. Current path: " << std:: endl;
	get_pwd(conf);
	std::cout << std::endl;

	//The End

}
